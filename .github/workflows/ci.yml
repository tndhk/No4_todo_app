name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        cd backend
        pytest

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm install
    
    - name: Lint with ESLint
      run: |
        cd frontend
        npm run lint || echo "No linting configured"
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --watchAll=false

  build-docker:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Build and tag Docker images
      run: |
        docker-compose build
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      if: ${{ env.DOCKER_HUB_USERNAME != '' && env.DOCKER_HUB_ACCESS_TOKEN != '' }}
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Push Docker images
      run: |
        # このステップは認証情報が設定されている場合のみ実行
        if [ ! -z "${{ secrets.DOCKER_HUB_USERNAME }}" ] && [ ! -z "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]; then
          docker tag todo-app_frontend ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app-frontend:latest
          docker tag todo-app_backend ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app-backend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app-frontend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app-backend:latest
        else
          echo "Docker Hub credentials not provided. Skipping push."
        fi