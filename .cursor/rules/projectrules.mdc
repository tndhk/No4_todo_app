---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to


# 個人向けTo-Do Webアプリ 要件定義

1. 概要

個人用のタスク管理Webアプリを開発する。シンプルで直感的なUIを提供し、タスクの管理・整理を容易にすることを目的とする。
最終的にはAWS環境で本番運用を目指すが、それまではローカル開発環境を前提とする。

⸻

2. ユーザー要件

2.1 ユーザータイプ
	•	一般ユーザー（個人利用のみ）: 1人でタスクを管理する。チームや他者との共有は不要。

2.2 ユースケース
	•	自分のタスクを簡単に登録し、整理する。
	•	重要度に応じて優先順位をつける。
	•	期限を設定し、リスト化して管理する。
	•	タスクのステータスを更新し、完了したものを見やすくする。

⸻

3. 機能要件

3.1 タスク管理

✅ タスクの作成・編集・削除
✅ タスクの完了・未完了の切り替え
✅ タスクの優先度設定（低・中・高）
✅ タスクの期日設定（締め切り）

3.2 タスクの整理

✅ カテゴリ（プロジェクト）: タスクをカテゴリごとに整理
✅ サブタスク: タスクの階層化（親タスクと子タスク）

3.3 進捗管理

✅ タスクの完了数・未完了数の表示（簡単なダッシュボード）

3.4 ユーザーインターフェース

✅ シンプルで直感的なUI
✅ ダークモード対応
✅ レスポンシブデザイン（PC・スマホ対応）
✅ ショートカットキー対応（キーボード操作）

3.5 その他

✅ 検索・フィルタリング（完了/未完了タスク、優先度順）
✅ タスクのドラッグ＆ドロップ並び替え
✅ タスクの色分けで視認性向上

⸻

4. 非機能要件

4.1 パフォーマンス
	•	シングルページアプリケーション（SPA）で高速動作
	•	最小限のデータロードで軽量化

4.2 セキュリティ
	•	ユーザーデータの外部送信なし
	•	認証が必要になった場合はJWT（JSON Web Token）を採用

4.3 ユーザーエクスペリエンス
	•	タスクのドラッグ＆ドロップ並び替え
	•	UI/UXの最適化（タスク追加・編集の直感的な操作性）

⸻

5. 技術スタック

5.1 開発環境

✅ OS: macOS (MacBook M2)
✅ コンテナ管理: Docker（開発環境構築・依存関係管理）
✅ コード管理: GitHub（リモートリポジトリ）

5.2 フロントエンド

✅ フレームワーク: React 
✅ UIライブラリ: Tailwind CSS / Material UI
✅ 状態管理: Zustand（Reactの場合）、Pinia（Vueの場合）
✅ パッケージ管理: pnpm / npm / yarn

5.3 バックエンド

✅ フレームワーク: FastAPI（Python） 
✅ データベース: SQLite（開発用）→ PostgreSQL（本番）
✅ 認証: 初期はなし、将来的にJWTベースの認証を追加可能
✅ API: REST API 

5.4 インフラ

✅ ローカル環境: Docker Compose（バックエンド・データベース管理）
✅ CI/CD: GitHub Actions（将来的にAWSデプロイ時に利用）


# 外部設計
1. システム全体構成

アーキテクチャ概要
	•	フロントエンド: React を利用したシングルページアプリケーション（SPA）
	•	UIライブラリ：Tailwind CSS または Material UI
	•	状態管理：Zustand（React想定）
	•	バックエンド: FastAPI（Python）による REST API サービス
	•	データベース（開発）：SQLite、（本番）：PostgreSQL
	•	認証：初期は無し、将来的に JWT 導入を検討
	•	インフラ: Docker 環境でローカル開発を構築（Docker Compose によるバックエンド・DB管理）
	•	CI/CD：GitHub Actions による自動テスト・ビルド
	•	運用: 最終的に AWS 上で本番運用を目指す

⸻

2. コンポーネント設計

2.1 フロントエンド

UI コンポーネント設計
	•	トップ画面（ダッシュボード）
	•	タスクの統計情報（完了/未完了件数、優先度別集計）
	•	タスクのフィルタリング・検索バー
	•	タスク一覧画面
	•	タスクカード／リスト表示（ドラッグ＆ドロップによる並び替え対応）
	•	カテゴリ別にセクション分け（プロジェクト毎）
	•	タスク詳細／編集画面
	•	タスクのタイトル、詳細説明、優先度、締め切り、カテゴリ、サブタスクの編集・追加
	•	ステータス更新（完了／未完了の切り替え）
	•	レスポンシブデザイン
	•	PC・スマートフォンでの最適な表示レイアウト
	•	ダークモード
	•	ユーザー設定やシステム設定に基づくテーマ切替

状態管理とUX
	•	状態管理:
	•	タスク情報やフィルタ、ドラッグ＆ドロップ操作の状態を Zustand により管理
	•	ショートカットキー:
	•	タスク作成、編集、削除、並び替えなど主要アクションに対するキーボード操作のサポート

2.2 バックエンド

API 設計
	•	エンドポイント例:
	•	GET /tasks : タスク一覧の取得（フィルタ・ソートに対応）
	•	POST /tasks : タスクの新規作成
	•	GET /tasks/{id} : 個別タスクの詳細取得
	•	PUT /tasks/{id} : タスクの更新
	•	DELETE /tasks/{id} : タスクの削除
	•	PATCH /tasks/{id}/status : タスクのステータス更新（完了／未完了切替）
	•	パラメータ設計:
	•	優先度（low, medium, high）、期限（日付）、カテゴリ、サブタスク（親子関係）などをリクエストボディ・クエリパラメータで管理

バックエンドロジック
	•	タスク管理:
	•	CRUD 操作の基本ロジックに加え、サブタスクの階層管理、優先度更新、ドラッグ＆ドロップ順序の管理（orderカラム等）の実装
	•	進捗管理:
	•	完了タスク数／未完了タスク数の集計ロジックを API で提供、ダッシュボードでの利用を想定
	•	セキュリティ:
	•	初期はローカル環境のみ。将来的なユーザー認証導入時は JWT を組み込み、API の保護を実施

データベース設計（SQLite→PostgreSQL）
	•	タスクテーブル
	•	id (PK, 自動採番)
	•	title (タスク名)
	•	description (詳細)
	•	priority (low, medium, high)
	•	due_date (締め切り日時)
	•	status (完了/未完了)
	•	order_index (ドラッグ＆ドロップ順序)
	•	category_id (外部キー：カテゴリテーブル)
	•	parent_task_id (NULL許容、サブタスクの場合の親タスク)
	•	created_at, updated_at (タイムスタンプ)
	•	カテゴリテーブル
	•	id (PK)
	•	name (カテゴリ名)
	•	（必要に応じて）ユーザーテーブル
	•	初期は省略、認証追加時に設計

⸻

3. 開発フローと工程

3.1 ローカル開発環境構築
	•	Dockerfile および Docker Compose による環境構築
	•	フロントエンドコンテナ（React 開発サーバー）
	•	バックエンドコンテナ（FastAPI サーバー）
	•	データベースコンテナ（SQLiteの場合はローカルマウント、将来はPostgreSQL用コンテナ）

3.2 データベース設計とマイグレーション
	•	初期は SQLite によるシンプルなテーブル設計
	•	SQLAlchemy（または他のORM）を利用してモデル定義
	•	将来的に PostgreSQL へ移行できるように抽象化

3.3 フロントエンド実装
	•	コンポーネント単位での実装（Atomic Designの考え方も採用可能）
	•	状態管理（Zustand）で API から取得したタスクデータの一元管理
	•	UI のテスト（ユニットテスト／E2Eテスト）を組み込む

3.4 バックエンド実装
	•	FastAPI による REST API のエンドポイント実装
	•	各エンドポイントに対するユニットテスト・統合テストの実施
	•	ドキュメント生成（FastAPI の自動生成するOpenAPI仕様書を活用）

3.5 CI/CD 整備
	•	GitHub Actions による以下のパイプライン構成：
	•	コードのプッシュ時に静的解析、ユニットテストの実行
	•	Docker イメージのビルド・テスト
	•	将来的なAWSへのデプロイ用のステップ追加

⸻

4. 非機能要件への対応

4.1 パフォーマンス
	•	SPA として初回ロードを最小限に抑え、必要に応じた遅延ロード（コードスプリッティング）
	•	API レスポンスの高速化とキャッシュ導入（必要に応じて）

4.2 セキュリティ
	•	ユーザーデータはローカル環境で完結させ、外部送信は行わない（開発環境）
	•	将来的に認証が必要になった場合、JWT ベースの認証ミドルウェアの追加

4.3 ユーザーエクスペリエンス
	•	ドラッグ＆ドロップ操作のスムーズな実装（React DnD 等のライブラリ利用）
	•	キーボードショートカットでの操作性向上
	•	UI/UX のテストを実施し、直感的な操作性を確認

⸻

5. 設計の留意点
	•	拡張性:
	•	初期はシンプルな構造とし、後からカテゴリ機能やユーザー認証を容易に追加できるようにする
	•	モジュール分割:
	•	フロントエンド、バックエンド、DB、CI/CD をそれぞれ独立したモジュールとして管理することで、チーム開発や変更が容易になる
	•	ドキュメント:
	•	API仕様書（OpenAPI）、DB設計書、UI コンポーネント設計書を作成して共有する

⸻

以下は、上記設計に基づいた画面イメージ（ワイヤーフレーム）の一例です。これはあくまで概念設計であり、実際のUI実装時の参考にしていただくためのものです。

⸻

画面ワイヤーフレーム
1. ダッシュボード画面

┌─────────────────────────────────────────────┐
│ [ロゴ]           タイトル（例: To-Do App）      │
│ ─────────────────────────────────────────────│
│  [サイドバー]      |   統計・概要（Main Area）   │
│  ・フィルター      | ┌────────────────────────┐ │
│  ・カテゴリー      | │  ● 完了タスク：10       │ │
│                   | │  ● 未完了タスク：5      │ │
│                   | │  ● 優先度別タスク数      │ │
│                   | └────────────────────────┘ │
│                   |                          ↓ │
│                   |  [今日のタスク一覧（カード形式）] │
└─────────────────────────────────────────────┘

ポイント:
	•	ヘッダーにはアプリのロゴ、タイトル、テーマ切替ボタン（ダークモード）を配置
	•	サイドバーではカテゴリーやフィルター選択を簡単にできるようにする
	•	メインエリアでは統計情報と、今日のタスクの一覧（カードもしくはリスト形式）を表示

⸻

2. タスク一覧画面

┌─────────────────────────────────────────────┐
│ [ヘッダー]　→　検索バー | フィルター（優先度、期限）  │
│ ─────────────────────────────────────────────│
│ [サイドバー]       |      [タスク一覧エリア]          │
│  ・カテゴリー一覧  | ┌────────────────────────┐ │
│  ・プロジェクト    | │ ○ タスクタイトル         │ │
│                   | │   - 期限: YYYY/MM/DD      │ │
│                   | │   - 優先度: ★★★          │ │
│                   | ├────────────────────────┤ │
│                   | │ ○ タスクタイトル         │ │
│                   | │   - 期限: YYYY/MM/DD      │ │
│                   | │   - 優先度: ★☆            │ │
│                   | └────────────────────────┘ │
│                   | ※ 各タスクはドラッグ＆ドロップ可能 │
└─────────────────────────────────────────────┘

ポイント:
	•	上部に検索バーとフィルターメニューを配置し、ユーザーが素早く目的のタスクを絞り込めるようにする
	•	サイドバーではカテゴリーごとのタスク絞り込みが可能
	•	タスクはカードやリスト形式で表示し、ドラッグ＆ドロップで順序変更が可能

⸻

3. タスク詳細／編集画面

┌─────────────────────────────────────────────┐
│ [ヘッダー]　← 戻るボタン | タスクタイトル編集欄        │
│ ─────────────────────────────────────────────│
│ タスク詳細:                                    │
│ ┌─────────────────────────────────────────┐  │
│ │ 説明・詳細情報                            │  │
│ └─────────────────────────────────────────┘  │
│                                             │
│ ┌─────────┬────────────┬────────────┐       │
│ │ 優先度  │ 締め切り   │ カテゴリ    │       │
│ │ (★☆☆)  │ (YYYY/MM/DD)│ (例: プロジェクト名)│       │
│ └─────────┴────────────┴────────────┘       │
│                                             │
│ サブタスク:                                  │
│  ┌─────────────────────────┐                │
│  │ ○ サブタスク1           │ [編集][削除]      │
│  ├─────────────────────────┤                │
│  │ ○ サブタスク2           │ [編集][削除]      │
│  └─────────────────────────┘                │
│  [＋ サブタスク追加]                         │
│                                             │
│ [保存] [キャンセル] [削除]                     │
└─────────────────────────────────────────────┘

ポイント:
	•	ユーザーがタスクのタイトルや詳細、締め切り、優先度、カテゴリを編集できるフォームを用意
	•	サブタスクもリスト形式で表示し、編集や削除、追加が可能
	•	ボタン配置を工夫し、直感的な操作性を実現

⸻

補足
	•	レスポンシブデザイン:
各画面はPCやスマホの画面サイズに応じたレイアウトの切り替えを考慮。例えば、スマホの場合はサイドバーをハンバーガーメニューにするなど。
	•	ダークモード:
各画面の配色はユーザー設定やシステムテーマに合わせて自動的に切り替え可能にする。
	•	操作性:
ショートカットキーやドラッグ＆ドロップによるタスクの並び替えが直感的に行えるよう、各UIコンポーネントの設計に工夫を凝らす。

# 詳細設計
1. システム概要
	•	目的:
シンプルで直感的な個人向けタスク管理Webアプリを実現する
	•	アーキテクチャ:
	•	フロントエンド: React（状態管理にZustand、UIライブラリはTailwind CSSまたはMaterial UI）
	•	バックエンド: FastAPI（REST API）、初期はSQLite、将来はPostgreSQL
	•	インフラ: Docker/Docker Composeでローカル環境構築、最終的にAWSへ展開
	•	開発手法:
TDD（テスト駆動開発）を前提とし、各機能に対するユニットテスト、統合テスト、E2Eテストを実装

⸻

2. コンポーネント設計

2.1 フロントエンド

主要コンポーネントとその役割
	•	Headerコンポーネント
	•	内容: ロゴ、タイトル、テーマ切替ボタン、簡易メニュー
	•	テスト対象: レンダリング、クリックイベントによるテーマ切替の動作
	•	Sidebarコンポーネント
	•	内容: カテゴリ一覧、フィルター機能（優先度、期日など）
	•	テスト対象: 各フィルター項目の選択時の動作、フィルタリング結果の反映
	•	Dashboardコンポーネント
	•	内容: タスク統計情報（完了/未完了タスク数、優先度別集計）、今日のタスク一覧
	•	テスト対象: 統計情報の正確性、タスク一覧の表示およびフィルタリング動作
	•	TaskListコンポーネント
	•	内容: タスク一覧表示（カードまたはリスト形式）、ドラッグ＆ドロップによる並び替え
	•	テスト対象: ドラッグ＆ドロップの動作、タスク並び順の更新ロジック
	•	TaskDetail/Editコンポーネント
	•	内容: タスクの詳細表示、編集フォーム（タイトル、説明、優先度、期日、サブタスク管理）
	•	テスト対象: フォーム入力のバリデーション、保存/キャンセル/削除ボタンの動作、サブタスクのCRUD
	•	共通UIコンポーネント
	•	ボタン、入力フォーム、モーダルなどの再利用可能コンポーネント
	•	テスト対象: 各コンポーネントの基本的なレンダリング、イベントハンドラの動作

状態管理
	•	グローバル状態:
	•	Zustand によりタスク情報、フィルター設定、UI状態（ダークモードなど）を管理
	•	テスト対象: 状態更新アクション、非同期API呼び出し後の状態更新

⸻

2.2 バックエンド

APIエンドポイント設計

各エンドポイントはテストケース（リクエスト/レスポンスの期待値）を定義し、TDDで実装を進める。
	•	GET /tasks
	•	機能: タスク一覧の取得（フィルタ・ソート対応）
	•	パラメータ: status, priority, category（クエリパラメータ）
	•	テスト例: フィルター適用時に該当タスクのみ返却、空の場合は空配列
	•	POST /tasks
	•	機能: タスク新規作成
	•	ボディ: タイトル、説明、優先度、期日、カテゴリID、サブタスクリスト（オプション）
	•	テスト例: 正常時は201ステータス、必須項目のチェック、バリデーションエラー時は400ステータス
	•	GET /tasks/{id}
	•	機能: 個別タスクの詳細取得
	•	テスト例: 存在するIDで正しいタスク情報を返却、存在しないIDで404を返す
	•	PUT /tasks/{id}
	•	機能: タスクの更新
	•	ボディ: 更新可能な各フィールド
	•	テスト例: 更新内容が正しく反映されるか、更新失敗時のエラーハンドリング
	•	DELETE /tasks/{id}
	•	機能: タスクの削除
	•	テスト例: 削除後に一覧から除外される、存在しないIDで404エラー
	•	PATCH /tasks/{id}/status
	•	機能: タスクのステータス更新（完了／未完了の切替）
	•	ボディ: 更新するステータス
	•	テスト例: ステータス変更が正確に反映されるか

データベース設計
	•	タスクテーブル
	•	カラム例: id, title, description, priority, due_date, status, order_index, category_id, parent_task_id, created_at, updated_at
	•	テスト例: 各カラムの制約（NULL許容、型チェック）を確認するマイグレーションテスト
	•	カテゴリテーブル
	•	カラム例: id, name
	•	テスト例: カテゴリ登録、重複防止、削除時の連動処理
	•	（認証用ユーザーテーブルは将来的に追加予定）

⸻

3. TDD を前提としたテスト設計

3.1 バックエンドテスト
	•	ユニットテスト:
	•	各APIエンドポイントのロジックを関数単位でテスト（例：タスク作成ロジックのバリデーション）
	•	モックを使用して、DBアクセスや外部サービスの依存部分を切り離してテスト
	•	統合テスト:
	•	FastAPIのTestClientを使用し、API全体のフロー（リクエスト→DB→レスポンス）をテスト
	•	各エンドポイントに対して、正しいHTTPステータスコードとレスポンス内容が返るか検証

3.2 フロントエンドテスト
	•	ユニットテスト:
	•	各Reactコンポーネントのレンダリングとイベントハンドラの動作を Jest や React Testing Library を利用してテスト
	•	Zustandによる状態管理のテスト：状態変更がコンポーネントに正しく反映されるか
	•	E2Eテスト:
	•	Cypress や Playwright を用いて、ユーザーシナリオ（タスクの追加、編集、削除、フィルタリング、ドラッグ＆ドロップ）をシナリオ単位でテスト

⸻

4. 開発フローとCI/CD
	•	開発フロー:
	1.	各機能ごとにテストケース（赤）を先に作成
	2.	テストケースに沿って最小限の実装（緑）
	3.	リファクタリング（リファクタリングフェーズ）
	4.	各機能毎にコミット・プルリクエストを作成
	•	CI/CDパイプライン:
	•	GitHub Actionsを利用して、コミット・プルリクエスト時に以下のステップを自動実行
	•	静的解析（ESLint, Flake8など）
	•	ユニットテストの実行
	•	統合テストの実行
	•	成功時のみDockerイメージのビルド・プッシュ

⸻

5. 詳細設計書の運用
	•	ドキュメント管理:
	•	各モジュールの仕様、テストケース、API仕様書をGitHub WikiまたはConfluence等で管理
	•	設計変更時はドキュメントの更新も同時に実施
	•	レビュー:
	•	コードレビューに加え、テストケースのカバレッジを重視し、CI/CDで一定以上のカバレッジを確保するルールを策定

⸻
